version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bookstore
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch-cluster
      - network.host=0.0.0.0
      - discovery.type=single-node
      - ELASTIC_PASSWORD=password
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - app-network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:2.13-2.6.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    networks:
      - app-network

  discovery:
    image: discovery:latest
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    environment:
      - eureka.client.service-url.defaultZone=http://discovery:8761/eureka/
    ports:
      - "8080:8080"
    depends_on:
      - discovery
    networks:
      - app-network

  user-service:
    image: user-service:latest
    container_name: user-service
    ports:
      - "8086:8086"
    depends_on:
      - discovery
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_FLYWAY_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_FLYWAY_USER: postgres
      SPRING_FLYWAY_PASSWORD: postgres
      SPRING_FLYWAY_LOCATIONS: classpath:db/migration
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - app-network

  book-service:
    image: book-service:latest
    container_name: book-service
    ports:
      - "8081:8081"
    depends_on:
      - discovery
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - app-network

  order-service:
    image: order-service:latest
    container_name: order-service
    ports:
      - "8083:8083"
    depends_on:
      - discovery
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - app-network

  inventory-service:
    image: inventory-service:latest
    container_name: inventory-service
    ports:
      - "8082:8082"
    depends_on:
      - discovery
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - app-network

  search-service:
    image: search-service:latest
    container_name: search-service
    ports:
      - "8085:8085"
    depends_on:
      elasticsearch:
        condition: service_healthy
      discovery:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

  payment-service:
    image: payment-service:latest
    container_name: payment-service
    ports:
      - "8084:8084"
    depends_on:
      - discovery
      - postgres
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      eureka.client.service-url.defaultZone: http://discovery:8761/eureka/
      KAFKA_BROKER: kafka:9092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - app-network

volumes:
  postgres-data:
  elasticsearch-data:

networks:
  app-network:
    driver: bridge
